// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: jot/v1/jot.proto

package jotv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/s992/jot/internal/generated/proto/jot/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JotServiceName is the fully-qualified name of the JotService service.
	JotServiceName = "jot.v1.JotService"
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "jot.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JotServiceCreateJotProcedure is the fully-qualified name of the JotService's CreateJot RPC.
	JotServiceCreateJotProcedure = "/jot.v1.JotService/CreateJot"
	// JotServiceListJotsProcedure is the fully-qualified name of the JotService's ListJots RPC.
	JotServiceListJotsProcedure = "/jot.v1.JotService/ListJots"
	// JotServiceUpdateJotProcedure is the fully-qualified name of the JotService's UpdateJot RPC.
	JotServiceUpdateJotProcedure = "/jot.v1.JotService/UpdateJot"
	// TagServiceFindTagsProcedure is the fully-qualified name of the TagService's FindTags RPC.
	TagServiceFindTagsProcedure = "/jot.v1.TagService/FindTags"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jotServiceServiceDescriptor         = v1.File_jot_v1_jot_proto.Services().ByName("JotService")
	jotServiceCreateJotMethodDescriptor = jotServiceServiceDescriptor.Methods().ByName("CreateJot")
	jotServiceListJotsMethodDescriptor  = jotServiceServiceDescriptor.Methods().ByName("ListJots")
	jotServiceUpdateJotMethodDescriptor = jotServiceServiceDescriptor.Methods().ByName("UpdateJot")
	tagServiceServiceDescriptor         = v1.File_jot_v1_jot_proto.Services().ByName("TagService")
	tagServiceFindTagsMethodDescriptor  = tagServiceServiceDescriptor.Methods().ByName("FindTags")
)

// JotServiceClient is a client for the jot.v1.JotService service.
type JotServiceClient interface {
	CreateJot(context.Context, *connect.Request[v1.CreateJotRequest]) (*connect.Response[v1.Jot], error)
	ListJots(context.Context, *connect.Request[v1.ListJotsRequest]) (*connect.Response[v1.ListJotsResponse], error)
	UpdateJot(context.Context, *connect.Request[v1.UpdateJotRequest]) (*connect.Response[v1.Jot], error)
}

// NewJotServiceClient constructs a client for the jot.v1.JotService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jotServiceClient{
		createJot: connect.NewClient[v1.CreateJotRequest, v1.Jot](
			httpClient,
			baseURL+JotServiceCreateJotProcedure,
			connect.WithSchema(jotServiceCreateJotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listJots: connect.NewClient[v1.ListJotsRequest, v1.ListJotsResponse](
			httpClient,
			baseURL+JotServiceListJotsProcedure,
			connect.WithSchema(jotServiceListJotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJot: connect.NewClient[v1.UpdateJotRequest, v1.Jot](
			httpClient,
			baseURL+JotServiceUpdateJotProcedure,
			connect.WithSchema(jotServiceUpdateJotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jotServiceClient implements JotServiceClient.
type jotServiceClient struct {
	createJot *connect.Client[v1.CreateJotRequest, v1.Jot]
	listJots  *connect.Client[v1.ListJotsRequest, v1.ListJotsResponse]
	updateJot *connect.Client[v1.UpdateJotRequest, v1.Jot]
}

// CreateJot calls jot.v1.JotService.CreateJot.
func (c *jotServiceClient) CreateJot(ctx context.Context, req *connect.Request[v1.CreateJotRequest]) (*connect.Response[v1.Jot], error) {
	return c.createJot.CallUnary(ctx, req)
}

// ListJots calls jot.v1.JotService.ListJots.
func (c *jotServiceClient) ListJots(ctx context.Context, req *connect.Request[v1.ListJotsRequest]) (*connect.Response[v1.ListJotsResponse], error) {
	return c.listJots.CallUnary(ctx, req)
}

// UpdateJot calls jot.v1.JotService.UpdateJot.
func (c *jotServiceClient) UpdateJot(ctx context.Context, req *connect.Request[v1.UpdateJotRequest]) (*connect.Response[v1.Jot], error) {
	return c.updateJot.CallUnary(ctx, req)
}

// JotServiceHandler is an implementation of the jot.v1.JotService service.
type JotServiceHandler interface {
	CreateJot(context.Context, *connect.Request[v1.CreateJotRequest]) (*connect.Response[v1.Jot], error)
	ListJots(context.Context, *connect.Request[v1.ListJotsRequest]) (*connect.Response[v1.ListJotsResponse], error)
	UpdateJot(context.Context, *connect.Request[v1.UpdateJotRequest]) (*connect.Response[v1.Jot], error)
}

// NewJotServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJotServiceHandler(svc JotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jotServiceCreateJotHandler := connect.NewUnaryHandler(
		JotServiceCreateJotProcedure,
		svc.CreateJot,
		connect.WithSchema(jotServiceCreateJotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jotServiceListJotsHandler := connect.NewUnaryHandler(
		JotServiceListJotsProcedure,
		svc.ListJots,
		connect.WithSchema(jotServiceListJotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jotServiceUpdateJotHandler := connect.NewUnaryHandler(
		JotServiceUpdateJotProcedure,
		svc.UpdateJot,
		connect.WithSchema(jotServiceUpdateJotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/jot.v1.JotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JotServiceCreateJotProcedure:
			jotServiceCreateJotHandler.ServeHTTP(w, r)
		case JotServiceListJotsProcedure:
			jotServiceListJotsHandler.ServeHTTP(w, r)
		case JotServiceUpdateJotProcedure:
			jotServiceUpdateJotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJotServiceHandler struct{}

func (UnimplementedJotServiceHandler) CreateJot(context.Context, *connect.Request[v1.CreateJotRequest]) (*connect.Response[v1.Jot], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jot.v1.JotService.CreateJot is not implemented"))
}

func (UnimplementedJotServiceHandler) ListJots(context.Context, *connect.Request[v1.ListJotsRequest]) (*connect.Response[v1.ListJotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jot.v1.JotService.ListJots is not implemented"))
}

func (UnimplementedJotServiceHandler) UpdateJot(context.Context, *connect.Request[v1.UpdateJotRequest]) (*connect.Response[v1.Jot], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jot.v1.JotService.UpdateJot is not implemented"))
}

// TagServiceClient is a client for the jot.v1.TagService service.
type TagServiceClient interface {
	FindTags(context.Context, *connect.Request[v1.FindTagsRequest]) (*connect.Response[v1.FindTagsResponse], error)
}

// NewTagServiceClient constructs a client for the jot.v1.TagService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tagServiceClient{
		findTags: connect.NewClient[v1.FindTagsRequest, v1.FindTagsResponse](
			httpClient,
			baseURL+TagServiceFindTagsProcedure,
			connect.WithSchema(tagServiceFindTagsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	findTags *connect.Client[v1.FindTagsRequest, v1.FindTagsResponse]
}

// FindTags calls jot.v1.TagService.FindTags.
func (c *tagServiceClient) FindTags(ctx context.Context, req *connect.Request[v1.FindTagsRequest]) (*connect.Response[v1.FindTagsResponse], error) {
	return c.findTags.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the jot.v1.TagService service.
type TagServiceHandler interface {
	FindTags(context.Context, *connect.Request[v1.FindTagsRequest]) (*connect.Response[v1.FindTagsResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceFindTagsHandler := connect.NewUnaryHandler(
		TagServiceFindTagsProcedure,
		svc.FindTags,
		connect.WithSchema(tagServiceFindTagsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/jot.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceFindTagsProcedure:
			tagServiceFindTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) FindTags(context.Context, *connect.Request[v1.FindTagsRequest]) (*connect.Response[v1.FindTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jot.v1.TagService.FindTags is not implemented"))
}
