// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tag.sql

package db

import (
	"context"
)

const createTag = `-- name: CreateTag :one
;

insert into
  tag (name)
values
  (?1) returning id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
;

select
  id, name
from
  tag
where
  name = ?1
limit
  1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTagsByFrecency = `-- name: ListTagsByFrecency :many
select
  t.id,
  t.name
from
  tag t
  left join jot j on j.tag_id = t.id
where
  t.name glob concat ('*', ?1, '*')
group by
  t.id
order by
  count(j.id) desc,
  max(j.created_at) desc
limit
  100
`

func (q *Queries) ListTagsByFrecency(ctx context.Context, tagname interface{}) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByFrecency, tagname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
